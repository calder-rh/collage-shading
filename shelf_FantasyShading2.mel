global proc shelf_FantasyShading2 () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Set the render camera, used to calculate the positions of textures" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "camera" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "set\ncamera\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys\nfrom importlib import reload\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import set_camera\nreload(set_camera)\nfrom internals.buttons import set_camera\nset_camera.run()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Apply a collage shader (made of flat/projected textures that follow the position of an object)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "collage shader" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "collage\nshader\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys\nfrom importlib import reload\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import make_collage_shader\nreload(make_collage_shader)\nfrom internals.buttons import make_collage_shader\nmake_collage_shader.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Apply a flat shader to the ground" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "ground shader" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ground\nshader\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import ground\nimportlib.reload(ground)\nfrom internals.buttons import ground\nground.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a file with the UV map of an object, as a reference for making a collage map" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "collage map" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "collage\nmap\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys\nfrom importlib import reload\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import make_uv_file\nreload(make_uv_file)\nfrom internals.buttons import make_uv_file\nmake_uv_file.run()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a file to specify settings for a palette" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "palette" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "palette\nsetting\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys\nfrom importlib import reload\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import make_palette_settings\nreload(make_palette_settings)\nfrom internals.buttons import make_palette_settings\nmake_palette_settings.run()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Define an illuminee (an object or set of objects that are treated as one thing by the lighting system)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "illuminee" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "illum\n\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys\nfrom importlib import reload\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import make_illuminee\nreload(make_illuminee)\nfrom internals.buttons import make_illuminee\nmake_illuminee.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Add or remove a proxy shape for calculating an illumineeâ€™s light gradient" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "proxy shape" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "proxy\nshape\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import proxy\nimportlib.reload(proxy)\nfrom internals.buttons import proxy\nproxy.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Reconnect this illumineeâ€™s settings to the global lighting settings" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "reconnect illuminee" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "reset\nillum\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import reconnect\nimportlib.reload(reconnect)\nfrom internals.buttons import reconnect\nreconnect.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Reload illuminees, bringing up to date any changes in meshes, proxies, or light linking" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "reload illuminees" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "reload\nillums\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import reload\nimportlib.reload(reload)\nfrom internals.buttons import reload\nreload.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Link a light to one illuminee or to all fantasy shaded objects" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "add light" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "add\nlight\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import add_light\nimportlib.reload(add_light)\nfrom internals.buttons import add_light\nadd_light.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Unlink a light from one illuminee or to all fantasy shaded objects" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "remove light" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "remove\nlight\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import exclude_light\nimportlib.reload(exclude_light)\nfrom internals.buttons import exclude_light\nexclude_light.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Remove illuminee-specific light linking; use global light settings for selected illuminees" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "reset light" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "reset\nlight\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import reset_light\nimportlib.reload(reset_light)\nfrom internals.buttons import reset_light\nreset_light.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Set an object to be a shadow influence (the surface of fantasy world objects gets darker near a shadow influence)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "add shadow influence" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "add\nshadow\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import make_influence\nimportlib.reload(make_influence)\nfrom internals.buttons import make_influence\nmake_influence.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Set an object to not be a shadow influence" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "remove shadow influence" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "remove\nshadow\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import remove_influence\nimportlib.reload(remove_influence)\nfrom internals.buttons import remove_influence\nremove_influence.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 54
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Connect the global controls in this file to the global controls in all referenced files" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "load reference" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "load\nref\n" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "empty.png" 
        -image1 "empty.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pymel.core import *\nimport sys, importlib\nfrom pathlib import Path\nsys.path = [item for item in sys.path if 'shading/fantasy/code' not in item]\ncode_path = str(Path(workspace(q=True, rd=True)) / 'shading' / 'fantasy' / 'code')\nif code_path not in sys.path:\n    sys.path.append(code_path)\n\nfrom internals.buttons import load_reference\nimportlib.reload(load_reference)\nfrom internals.buttons import load_reference\nload_reference.run()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
